class DisjointSet:
    def __init__(self, vertices):
        self.parent = {v: v for v in vertices}

    def find(self, v):
        if self.parent[v] != v:
            self.parent[v] = self.find(self.parent[v])  
        return self.parent[v]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u != root_v:
            self.parent[root_v] = root_u
            return True
        return False


def kruskal_algorithm(vertices, edges):
    edges.sort(key=lambda x: x[2])  
    ds = DisjointSet(vertices)

    mst = []
    total_cost = 0

    for u, v, weight in edges:
        if ds.union(u, v):
            mst.append((u, v, weight))
            total_cost += weight

    return mst, total_cost



print("Kruskal's Minimum Spanning Tree Algorithm")


n = int(input("Enter number of vertices: "))
vertices = []
print("Enter the vertex names:")

for _ in range(n):
    vertices.append(input().strip())


e = int(input("Enter number of edges: "))
edges = []
print("Enter each edge in the format: vertex1 vertex2 weight")

for _ in range(e):
    u, v, w = input().split()
    edges.append((u, v, int(w)))


mst, cost = kruskal_algorithm(vertices, edges)


print("\nEdges in Minimum Spanning Tree:")
for u, v, w in mst:
    print(f"{u} - {v} : {w}")


print("Total cost of MST:", cost)




































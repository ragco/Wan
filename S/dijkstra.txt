import heapq

def dijkstra(graph, start):
    pq = [(0, start)]
    distances = {vertex: float('inf') for vertex in graph}
    distances[start] = 0

    while pq:
        current_distance, current_vertex = heapq.heappop(pq)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances


graph = {}
n = int(input("Enter number of vertices: "))
print("Enter vertex names:")
vertices = [input(f"Vertex {i+1}: ") for i in range(n)]


for vertex in vertices:
    graph[vertex] = []

e = int(input("Enter number of edges: "))
print("Enter edges in format: from to weight")
for _ in range(e):
    u, v, w = input().split()
    w = int(w)
    graph[u].append((v, w))
    graph[v].append((u, w))  

start = input("Enter the starting vertex: ")


shortest_distances = dijkstra(graph, start)


print("\nShortest distances from", start)
for vertex in vertices:
    print(f"{start} -> {vertex} = {shortest_distances[vertex]}")







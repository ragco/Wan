def is_safe(node, color, graph, colors):
    
    for adj in range(len(graph)):
        if graph[node][adj] == 1 and colors[adj] == color:
            return False
    return True

def backtrack(graph, m, colors, node=0):
    if node == len(graph):
        return True  

    for c in range(1, m + 1):  
        if is_safe(node, c, graph, colors):
            colors[node] = c
            if backtrack(graph, m, colors, node + 1):
                return True
            colors[node] = 0  

    return False  



n = int(input("Enter number of nodes: "))
m = int(input("Enter number of colors: "))

print("Enter adjacency matrix (0/1):")
graph = [list(map(int, input().split())) for _ in range(n)]

colors = [0] * n
if backtrack(graph, m, colors):
    print("Coloring possible:", colors)
else:
    print("No solution exists with", m, "colors.")
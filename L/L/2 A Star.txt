# Function to implement A* algorithm to find the shortest path from start_node to stop_node
def aStarAlgo(start_node, stop_node):
    open_set = set([start_node])  # Initialize open set with start_node
    closed_set = set()  # Initialize closed set
    g = {start_node: 0}  # Initialize cost from start_node to other nodes
    parents = {start_node: start_node}  # Initialize parent nodes

    # Loop until open set is not empty
    while len(open_set) > 0:
        n = None  # Initialize current node as None

        # Select the node with the lowest f value from the open set
        for v in open_set:
            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v

        # If current node is the stop_node or it has no neighbors
        if n == stop_node or Graph_nodes[n] is None:
            pass
        else:
            # Update g and parent nodes for neighbors of current node
            for (m, weight) in get_neighbours(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n

                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)

        # If there is no path from start_node to stop_node
        if n is None:
            print("Path does not exist!")
            return None

        # If stop_node is found, reconstruct and return the path
        if n == stop_node:
            path = []

            while parents[n] != n:
                path.append(n)
                n = parents[n]

            path.append(start_node)
            path.reverse()

            print("Path found: {}".format(path))
            return path

        # Move current node from open set to closed set
        open_set.remove(n)
        closed_set.add(n)

    print("Path does not exist!")
    return None

# Function to get neighbors of a node
def get_neighbours(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None

# Heuristic function to estimate distance from a node to stop_node
def heuristic(n):
    H_dist = {
        'A': 11,
        'B': 6,
        'C': 99,
        'D': 1,
        'E': 7,
        'G': 0,
    }
    return H_dist[n]

# Graph represented as adjacency list
Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1), ('G', 9)],
    'C': None,
    'E': [('D', 6)],
    'D': [('G', 1)],
}

# Call the A* algorithm function with start_node 'A' and stop_node 'G'
path = aStarAlgo('A', 'G')

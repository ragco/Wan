# Define the graph as an adjacency list
graph = {
    '5': ['3', '7'],  # Node 5 is connected to nodes 3 and 7
    '3': ['2', '4'],  # Node 3 is connected to nodes 2 and 4
    '7': ['8'],       # Node 7 is connected to node 8
    '2': [],          # Node 2 has no outgoing edges
    '4': ['8'],       # Node 4 is connected to node 8
    '8': []           # Node 8 has no outgoing edges
}

visited = set()  # Set to keep track of visited nodes during traversal

# Define the Depth-First Search function
def dfs(visited, graph, node):
    # Check if the current node has not been visited yet
    if node not in visited:
        print(node)  # Print the current node
        visited.add(node)  # Add the current node to the visited set

        # Explore each neighbour of the current node recursively
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver code to demonstrate DFS traversal
print("Following is the Depth-First Search:")
dfs(visited, graph, '5')  # Call the DFS function starting from node '5'
